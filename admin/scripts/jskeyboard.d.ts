/// <reference path="./mindfusion-common/jscommon.d.ts" />
/// <reference path="./mindfusion-common/modules/jscommon.d.ts" />

// Type definitions for MindFusion.Keyboard for JavaScript
// Project: https://www.mindfusion.eu/javascript-keyboard.html
// Definitions by: MindFusion <https://www.mindfusion.eu>

// Copyright (c) 2018-2020, MindFusion LLC - Bulgaria.

declare module "keyboard-library"
{
export = MindFusion.Keyboard;
}

declare namespace MindFusion.Keyboard
{
	/** A base class for UI controls. */
	class UIControl extends MindFusion.Common.Control
	{
	}
	/** Specifies state of modifier keys. */
	class KeyboardState
	{
		/** A boolean value specifying state of Shift modifier. */
		static Shift: boolean;
		/** A boolean value specifying state of Ctrl modifier. */
		static Ctrl: boolean;
		/** A boolean value specifying state of Alt modifier. */
		static Alt: boolean;
		/** A boolean value specifying state of Caps Lock. */
		static CapsLock: boolean;
		/** A boolean value specifying state of Num Lock. */
		static NumLock: boolean;
		/** A boolean value specifying state of the Insert key. */
		static Insert: boolean;
	}
	/** Identifies keyboard layout modes. */
	enum KeyboardMode
	{
		/** A layout containing only the alpha-numeric block of keys. */
		Compact = 0,
		/** Laptop-like layout containing alpha-numeric and functional keys. */
		Default = 1,
		/** Desktop-like layout which also adds a num-pad block. */
		Extended = 2
	}
	/** Represents a key in the keyboard. */
	class Key
	{
		/** Initializes a new instance of the Key class.
		 * @param config An object literal whose fields are assigned to respective Key properties.
		*/
		constructor(config: any);
		/** Sends this key as input to focused element. */
		send(): void;
	}
	/** Defines layout of keyboard keys. */
	class KeyboardLayout
	{
		/** Initializes a new instance of the KeyboardLayout class. */
		constructor();
		/** Adds a new key with specified content and position to the layout.
		 * @param content A string containing the key's character.
		 * @param left A number specifying key's horizontal position.
		 * @param top A number specifying key's vertical position.
		 * @param width A number specifying key's width.
		 * @param height A number specifying key's height.
		 * @return The added key.
		*/
		addKey(content: string, left: number, top: number, width: number, height: number): Key;
		/** Creates and initializes a new KeyboardLayout from the specified definition object.
		 * @param layoutDef A JavaScipt layout definition generated by Keyboard Creator tool.
		*/
		static create(layoutDef: any): KeyboardLayout;
	}
	/** Implements a reusable Virtual Keyboard component. */
	class VirtualKeyboard extends UIControl
	{
		/** Initializes a new instance of the VirtualKeyboard class.
		 * @param element The Div DOM Element where this VirtualKeyboard instance should be rendered.
		*/
		constructor(element: HTMLDivElement);
		/** Gets or sets a value indicating whether the keyboard scales to fit inside its parent element. */
		scaleToFitParent: boolean;
		/** Gets or sets a value indicating whether pressing a regular key should automatically release modifier keys such as shift, alt, control etc. (except CapsLock). */
		autoReleaseModifierKeys: boolean;
		/** Gets or sets a value indicating whether the component should synthesize keyboard events repeatedly when a virtual key is pressed down, until the key is released. */
		autoRepeat: boolean;
		/** Gets or sets the current keyboard layout mode */
		layoutMode: KeyboardMode;
		/** Gets or sets the current custom keyboard layout */
		layout: KeyboardLayout;
		/** Gets or sets the current input language. */
		inputLocale: string;
		/** Sends the specified key as input to focused element.
		 * @param key The virtual key that should be sent.
		*/
		sendKey(key: Key): void;
		/** Creates and initializes a new VirtualKeyboard on the specified DOM element.
		 * @param element The DOM element that the keyboard should be attached to.
		 * @return A VirtualKeyboard object that represents the newly created keyboard.
		*/
		static create(element: HTMLDivElement): VirtualKeyboard;
	}
}
